- unique_name: {{ unique_name }}  # an arbitrary name for the monitored DB. functions also as prefix for found DBs if using continuous discovery "dbtype"-s
  dbtype: postgres-continuous-discovery # postgres|pgbouncer|postgres-continuous-discovery|patroni|patroni-continuous-discovery|patroni-namespace-discovery
  host: {{ postgres_host }}  # this is for self-monitoring; use "host.docker.internal" to monitor PG on the host machine; or ip/host for remote connection 
  port: 5432
  dbname: 
  user: srv_pgwatch2
  password: {{ pgwatch2_sql_user_password }}
  sslmode: disable # supported options: disable, require, verify-ca, verify-full
  stmt_timeout: 10 # statement timeout [seconds]
  is_superuser: false
  preset_metrics: exhaustive_ext # from list of presets defined in "metrics/preset-configs.yaml"
  custom_metrics: # if both preset and custom are specified, custom wins
  preset_metrics_standby: # optional metrics configuration for standby / replica state
  custom_metrics_standby:
  dbname_include_pattern: ^stf_.* # regex to filter databases to actually monitor for the "continuous" modes
  dbname_exclude_pattern:
  is_enabled: true
  group: default # just for logical grouping of DB hosts or for "sharding", i.e. splitting the workload between many gatherer daemons
  custom_tags: # option to add arbitrary tags (Influx / Postgres storage only) for every stored data row,
    # aws_instance_id: i-0af01c0123456789a  # for example to fetch data from some other source onto a same Grafana graph
    cluster_name: pgwatch2
  sslrootcert: ''
  sslcert: ''
  sslkey: ''

#- unique_name: 
#  dbtype: postgres-continuous-discovery
#  host: 
#  port: 
#  dbname:
#  user: 
#  password: 
#  sslmode: 
#  stmt_timeout: 
#  is_superuser: 
#  preset_metrics: 
#  custom_metrics:
#  preset_metrics_standby:
#  custom_metrics_standby:
#  dbname_include_pattern:
#  dbname_exclude_pattern:
#  is_enabled: true
#  group: default
#  custom_tags:
#  sslrootcert: ''
#  sslcert: ''
#  sslkey: ''

# config example by cybertec
# https://github.com/cybertec-postgresql/pgwatch2/blob/v1.9.0/pgwatch2/config/instances.yaml
